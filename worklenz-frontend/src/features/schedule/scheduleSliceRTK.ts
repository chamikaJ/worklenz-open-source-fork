import { createSlice, PayloadAction } from '@reduxjs/toolkit';\nimport { scheduleApi } from '@/api/schedule/scheduleApi';\nimport { PickerType } from '@/types/schedule/schedule-v2.types';\n\ninterface WorkloadData {\n  id: string;\n  name: string;\n  totalHours: number;\n  allocatedHours: number;\n  availableHours: number;\n  utilizationPercent: number;\n  projectCount: number;\n  status: 'available' | 'normal' | 'fully-allocated' | 'overallocated';\n  conflicts?: Array<{\n    type: 'overallocation' | 'schedule-conflict';\n    message: string;\n    severity: 'low' | 'medium' | 'high';\n  }>;\n}\n\ninterface UIState {\n  isFullscreen: boolean;\n  showWeekends: boolean;\n  zoomLevel: number;\n  viewMode: 'gantt' | 'list' | 'timeline';\n  selectedTimeRange: 'day' | 'week' | 'month' | 'quarter';\n  showCriticalPath: boolean;\n  showDependencies: boolean;\n  showMilestones: boolean;\n  showBaseline: boolean;\n  colorScheme: 'default' | 'priority' | 'status' | 'team';\n}\n\ninterface ScheduleState {\n  // UI State\n  ui: UIState;\n  \n  // Core State\n  isSettingsDrawerOpen: boolean;\n  isScheduleDrawerOpen: boolean;\n  workingDays: string[];\n  workingHours: number;\n  type: PickerType;\n  date: Date;\n  \n  // Resource Management State\n  selectedMemberId: string | null;\n  workloadData: WorkloadData[];\n  \n  // Filters and Search\n  searchTerm: string;\n  selectedProjects: string[];\n  selectedMembers: string[];\n  statusFilter: string[];\n  \n  // Cache and Performance\n  lastRefresh: number;\n  optimisticUpdates: Record<string, any>;\n}\n\nconst initialUIState: UIState = {\n  isFullscreen: false,\n  showWeekends: true,\n  zoomLevel: 1,\n  viewMode: 'gantt',\n  selectedTimeRange: 'month',\n  showCriticalPath: false,\n  showDependencies: true,\n  showMilestones: true,\n  showBaseline: false,\n  colorScheme: 'default',\n};\n\nconst initialState: ScheduleState = {\n  ui: initialUIState,\n  isSettingsDrawerOpen: false,\n  isScheduleDrawerOpen: false,\n  workingDays: ['monday', 'tuesday', 'wednesday', 'thursday', 'friday'],\n  workingHours: 8,\n  type: 'month',\n  date: new Date(),\n  selectedMemberId: null,\n  workloadData: [],\n  searchTerm: '',\n  selectedProjects: [],\n  selectedMembers: [],\n  statusFilter: [],\n  lastRefresh: 0,\n  optimisticUpdates: {},\n};\n\nconst scheduleSlice = createSlice({\n  name: 'schedule',\n  initialState,\n  reducers: {\n    // UI Actions\n    toggleFullscreen: (state) => {\n      state.ui.isFullscreen = !state.ui.isFullscreen;\n    },\n    \n    setShowWeekends: (state, action: PayloadAction<boolean>) => {\n      state.ui.showWeekends = action.payload;\n    },\n    \n    setZoomLevel: (state, action: PayloadAction<number>) => {\n      state.ui.zoomLevel = Math.max(0.5, Math.min(2, action.payload));\n    },\n    \n    setViewMode: (state, action: PayloadAction<'gantt' | 'list' | 'timeline'>) => {\n      state.ui.viewMode = action.payload;\n    },\n    \n    setTimeRange: (state, action: PayloadAction<'day' | 'week' | 'month' | 'quarter'>) => {\n      state.ui.selectedTimeRange = action.payload;\n    },\n    \n    toggleCriticalPath: (state) => {\n      state.ui.showCriticalPath = !state.ui.showCriticalPath;\n    },\n    \n    toggleDependencies: (state) => {\n      state.ui.showDependencies = !state.ui.showDependencies;\n    },\n    \n    toggleMilestones: (state) => {\n      state.ui.showMilestones = !state.ui.showMilestones;\n    },\n    \n    toggleBaseline: (state) => {\n      state.ui.showBaseline = !state.ui.showBaseline;\n    },\n    \n    setColorScheme: (state, action: PayloadAction<'default' | 'priority' | 'status' | 'team'>) => {\n      state.ui.colorScheme = action.payload;\n    },\n    \n    // Core Actions\n    toggleSettingsDrawer: (state) => {\n      state.isSettingsDrawerOpen = !state.isSettingsDrawerOpen;\n    },\n    \n    toggleScheduleDrawer: (state) => {\n      state.isScheduleDrawerOpen = !state.isScheduleDrawerOpen;\n    },\n    \n    setDate: (state, action: PayloadAction<Date>) => {\n      state.date = action.payload;\n    },\n    \n    setType: (state, action: PayloadAction<PickerType>) => {\n      state.type = action.payload;\n    },\n    \n    setSelectedMember: (state, action: PayloadAction<string | null>) => {\n      state.selectedMemberId = action.payload;\n    },\n    \n    // Filter Actions\n    setSearchTerm: (state, action: PayloadAction<string>) => {\n      state.searchTerm = action.payload;\n    },\n    \n    setSelectedProjects: (state, action: PayloadAction<string[]>) => {\n      state.selectedProjects = action.payload;\n    },\n    \n    setSelectedMembers: (state, action: PayloadAction<string[]>) => {\n      state.selectedMembers = action.payload;\n    },\n    \n    setStatusFilter: (state, action: PayloadAction<string[]>) => {\n      state.statusFilter = action.payload;\n    },\n    \n    // Optimistic Updates\n    addOptimisticUpdate: (state, action: PayloadAction<{ id: string; data: any }>) => {\n      state.optimisticUpdates[action.payload.id] = action.payload.data;\n    },\n    \n    removeOptimisticUpdate: (state, action: PayloadAction<string>) => {\n      delete state.optimisticUpdates[action.payload];\n    },\n    \n    clearOptimisticUpdates: (state) => {\n      state.optimisticUpdates = {};\n    },\n    \n    // Bulk UI Updates\n    updateUISettings: (state, action: PayloadAction<Partial<UIState>>) => {\n      state.ui = { ...state.ui, ...action.payload };\n    },\n    \n    resetUISettings: (state) => {\n      state.ui = initialUIState;\n    },\n    \n    // Performance\n    updateLastRefresh: (state) => {\n      state.lastRefresh = Date.now();\n    },\n  },\n  \n  extraReducers: (builder) => {\n    // Listen to RTK Query fulfillments for auto-refresh\n    builder\n      .addMatcher(\n        scheduleApi.endpoints.fetchScheduleSettings.matchFulfilled,\n        (state, action) => {\n          const settings = action.payload.body;\n          state.workingDays = settings.workingDays || state.workingDays;\n          state.workingHours = settings.workingHours || state.workingHours;\n          state.lastRefresh = Date.now();\n        }\n      )\n      .addMatcher(\n        scheduleApi.endpoints.fetchMemberWorkload.matchFulfilled,\n        (state, action) => {\n          state.workloadData = action.payload.body || [];\n          state.lastRefresh = Date.now();\n          // Clear related optimistic updates\n          Object.keys(state.optimisticUpdates)\n            .filter(key => key.startsWith('workload_'))\n            .forEach(key => delete state.optimisticUpdates[key]);\n        }\n      )\n      .addMatcher(\n        scheduleApi.endpoints.updateResourceAllocation.matchPending,\n        (state, action) => {\n          // Add optimistic update\n          const { memberId, projectId, allocatedHours } = action.meta.arg.originalArgs;\n          state.optimisticUpdates[`allocation_${memberId}_${projectId}`] = {\n            memberId,\n            projectId,\n            allocatedHours,\n            timestamp: Date.now(),\n          };\n        }\n      )\n      .addMatcher(\n        scheduleApi.endpoints.updateResourceAllocation.matchFulfilled,\n        (state, action) => {\n          const { memberId, projectId } = action.meta.arg.originalArgs;\n          delete state.optimisticUpdates[`allocation_${memberId}_${projectId}`];\n          state.lastRefresh = Date.now();\n        }\n      )\n      .addMatcher(\n        scheduleApi.endpoints.updateResourceAllocation.matchRejected,\n        (state, action) => {\n          const { memberId, projectId } = action.meta.arg.originalArgs;\n          delete state.optimisticUpdates[`allocation_${memberId}_${projectId}`];\n        }\n      )\n      .addMatcher(\n        scheduleApi.endpoints.rebalanceWorkload.matchFulfilled,\n        (state, action) => {\n          // Clear all workload-related optimistic updates after rebalancing\n          Object.keys(state.optimisticUpdates)\n            .filter(key => key.startsWith('workload_') || key.startsWith('allocation_'))\n            .forEach(key => delete state.optimisticUpdates[key]);\n          state.lastRefresh = Date.now();\n        }\n      );\n  },\n});\n\nexport const {\n  // UI Actions\n  toggleFullscreen,\n  setShowWeekends,\n  setZoomLevel,\n  setViewMode,\n  setTimeRange,\n  toggleCriticalPath,\n  toggleDependencies,\n  toggleMilestones,\n  toggleBaseline,\n  setColorScheme,\n  \n  // Core Actions\n  toggleSettingsDrawer,\n  toggleScheduleDrawer,\n  setDate,\n  setType,\n  setSelectedMember,\n  \n  // Filter Actions\n  setSearchTerm,\n  setSelectedProjects,\n  setSelectedMembers,\n  setStatusFilter,\n  \n  // Optimistic Updates\n  addOptimisticUpdate,\n  removeOptimisticUpdate,\n  clearOptimisticUpdates,\n  \n  // Bulk Updates\n  updateUISettings,\n  resetUISettings,\n  updateLastRefresh,\n} = scheduleSlice.actions;\n\nexport default scheduleSlice.reducer;\n\n// Selectors\nexport const selectUIState = (state: { schedule: ScheduleState }) => state.schedule.ui;\nexport const selectIsFullscreen = (state: { schedule: ScheduleState }) => state.schedule.ui.isFullscreen;\nexport const selectZoomLevel = (state: { schedule: ScheduleState }) => state.schedule.ui.zoomLevel;\nexport const selectShowWeekends = (state: { schedule: ScheduleState }) => state.schedule.ui.showWeekends;\nexport const selectViewMode = (state: { schedule: ScheduleState }) => state.schedule.ui.viewMode;\nexport const selectOptimisticUpdates = (state: { schedule: ScheduleState }) => state.schedule.optimisticUpdates;\nexport const selectWorkloadData = (state: { schedule: ScheduleState }) => state.schedule.workloadData;\nexport const selectSelectedMemberId = (state: { schedule: ScheduleState }) => state.schedule.selectedMemberId;\nexport const selectFilters = (state: { schedule: ScheduleState }) => ({\n  searchTerm: state.schedule.searchTerm,\n  selectedProjects: state.schedule.selectedProjects,\n  selectedMembers: state.schedule.selectedMembers,\n  statusFilter: state.schedule.statusFilter,\n});